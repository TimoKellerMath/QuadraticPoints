load "rank_calcs.m";

for g in [10..14] do
    printf "g = %o\n", g;
    for N in [N : N in [1..2000] | Genus(Gamma0(N)) eq g] do
        printf "N = %o: ", N;
        wds := [];
        for ws in Subsets({d : d in Divisors(N) | d ne 1 and Gcd(d, ExactQuotient(N,d)) eq 1}) do
            if ws eq {} or #ws ne 1 then
                continue;
            end if;
            if equal_rank(N, Setseq(ws)) then 
                printf "%o, ", Setseq(ws);
                Append(~wds, Setseq(ws));
            end if;
        end for;
        printf "\n";
    end for;
    printf "\n";
end for;

/*
g = 10
N = 86: [ 43 ], 
N = 92: [ 92 ], 
N = 108: [ 108 ], [ 4 ], [ 27 ], 
N = 127: [ 127 ], 

g = 11
N = 78: [ 39 ], [ 3 ], [ 13 ], [ 2 ], [ 78 ], [ 26 ], [ 6 ], 
N = 84: [ 3 ], [ 7 ], [ 28 ], [ 21 ], [ 84 ], [ 4 ], [ 12 ], 
N = 90: [ 90 ], [ 10 ], [ 2 ], [ 9 ], [ 45 ], [ 5 ], [ 18 ], 
N = 94: [ 2 ], [ 47 ], [ 94 ], 
N = 104: [ 13 ], [ 8 ], [ 104 ], 
N = 111: [ 37 ], 
N = 112: [ 112 ], [ 7 ], [ 16 ], 
N = 115: [ 23 ], [ 5 ], [ 115 ], 
N = 117: [ 117 ], 
N = 119: [ 119 ], [ 7 ], [ 17 ], 
N = 131: [ 131 ], 
N = 133: [ 133 ], 
N = 137: [ 137 ], 
N = 139: [ 139 ], 
N = 147: [ 3 ], [ 147 ], [ 49 ], 

g = 12
N = 106: [ 53 ], 
N = 149: [ 149 ], 
N = 151: [ 151 ], 
N = 157: [ 157 ], 

g = 13
N = 105: [ 15 ], [ 3 ], [ 105 ], [ 7 ], [ 21 ], [ 5 ], [ 35 ], 
N = 116: [ 29 ], 
N = 123: [ 123 ], 
N = 129: [ 43 ], 
N = 135: [ 135 ], [ 5 ], [ 27 ], 
N = 143: [ 143 ], [ 11 ], [ 13 ], 
N = 144: [ 144 ], [ 9 ], [ 16 ], 
N = 145: [ 145 ], 
N = 163: [ 163 ], 

g = 14
N = 118: [ 2 ], [ 118 ], [ 59 ], 
N = 122: [ 61 ], 
N = 124: [ 124 ], 
N = 167: [ 167 ], 
N = 173: [ 173 ], 
N = 181: [ 181 ],
*/